{"version":3,"sources":["cropImage.js","context.js","singleImage.js","uploadMoreButton.js","uploadMoreButtonAnimation.js","Body.js","Bottom.js","imageOptionModal.js","cropper.js","Modal.js","Navbar/BorderChoice.js","Navbar/NavbarUpper.js","Navbar/Navbar.js","App.js","index.js"],"names":["createImage","url","Promise","resolve","reject","image","Image","addEventListener","error","setAttribute","src","getRadianAngle","degreeValue","Math","PI","getCroppedImg","imageSrc","pixelCrop","a","rotation","canvas","document","createElement","ctx","getContext","maxSize","max","width","height","safeArea","sqrt","translate","rotate","drawImage","data","getImageData","putImageData","round","x","y","toBlob","file","URL","createObjectURL","AppContext","React","createContext","AppProvider","children","whiteBorderUrl","blackBorderUrl","border","id","img","white_space","borderUrl","borderSingleImage","borderId","useState","chooseBorder","setChooseBorder","singleImageBorder","setSingleImageBorder","showModal","setShowModal","showImageOptionModal","setShowImageOptionModal","imageSrcCropped","setImageSrcCropped","selectedImageId","setSelectedImageId","croppedAreaPixels","setCroppedAreaPixels","zoom","setZoom","crop","setCrop","setRotation","croppedImage","setCroppedImage","onCropComplete","useCallback","croppedArea","console","log","showCroppedImage","find","element","newImageSrcCropped","indexOf","addImagePosition","setAddImagePosition","setImageSrc","onFileChange","e","target","files","length","readFile","imageDataUrl","newUploadImageId","uuidv4","reader","FileReader","result","readAsDataURL","Provider","value","imageOptionHandling","chooseBorderHandling","includes","useGlobalContext","useContext","SingleImage","className","alt","onClick","FrontUploadMoreButton","props","position","htmlFor","type","onChange","accept","BackUploadMoreButton","UploadMoreButtonAnimation","Body","map","Bottom","href","ImageOptionModal","content","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","filter","newImageSrc","class","fill-rule","clip-rule","ReactDOM","createPortal","getElementById","Crop","aspect","onCropChange","onRotationChange","onZoomChange","Modal","BorderChoice","index","selected","NavbarUpper","Navbar","App","rootElement","render"],"mappings":"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","file":"static/js/main.8ecc095d.chunk.js","sourcesContent":["const createImage = (url) =>\r\n  new Promise((resolve, reject) => {\r\n    const image = new Image();\r\n    image.addEventListener(\"load\", () => resolve(image));\r\n    image.addEventListener(\"error\", (error) => reject(error));\r\n    image.setAttribute(\"crossOrigin\", \"anonymous\"); // needed to avoid cross-origin issues on CodeSandbox\r\n    image.src = url;\r\n  });\r\n\r\nfunction getRadianAngle(degreeValue) {\r\n  return (degreeValue * Math.PI) / 180;\r\n}\r\n\r\n/**\r\n * This function was adapted from the one in the ReadMe of https://github.com/DominicTobias/react-image-crop\r\n * @param {File} image - Image File url\r\n * @param {Object} pixelCrop - pixelCrop Object provided by react-easy-crop\r\n * @param {number} rotation - optional rotation parameter\r\n */\r\nexport default async function getCroppedImg(imageSrc, pixelCrop, rotation = 0) {\r\n  const image = await createImage(imageSrc);\r\n  const canvas = document.createElement(\"canvas\");\r\n  const ctx = canvas.getContext(\"2d\");\r\n\r\n  const maxSize = Math.max(image.width, image.height);\r\n  const safeArea = 2 * ((maxSize / 2) * Math.sqrt(2));\r\n\r\n  // set each dimensions to double largest dimension to allow for a safe area for the\r\n  // image to rotate in without being clipped by canvas context\r\n  canvas.width = safeArea;\r\n  canvas.height = safeArea;\r\n\r\n  // translate canvas context to a central location on image to allow rotating around the center.\r\n  ctx.translate(safeArea / 2, safeArea / 2);\r\n  ctx.rotate(getRadianAngle(rotation));\r\n  ctx.translate(-safeArea / 2, -safeArea / 2);\r\n\r\n  // draw rotated image and store data.\r\n  ctx.drawImage(\r\n    image,\r\n    safeArea / 2 - image.width * 0.5,\r\n    safeArea / 2 - image.height * 0.5\r\n  );\r\n  const data = ctx.getImageData(0, 0, safeArea, safeArea);\r\n\r\n  // set canvas width to final desired crop size - this will clear existing context\r\n  canvas.width = pixelCrop.width;\r\n  canvas.height = pixelCrop.height;\r\n\r\n  // paste generated rotate image with correct offsets for x,y crop values.\r\n  ctx.putImageData(\r\n    data,\r\n    Math.round(0 - safeArea / 2 + image.width * 0.5 - pixelCrop.x),\r\n    Math.round(0 - safeArea / 2 + image.height * 0.5 - pixelCrop.y)\r\n  );\r\n\r\n  // As Base64 string\r\n  // return canvas.toDataURL('image/jpeg');\r\n\r\n  // As a blob\r\n  return new Promise((resolve) => {\r\n    canvas.toBlob((file) => {\r\n      resolve(URL.createObjectURL(file));\r\n    }, \"image/jpeg\");\r\n  });\r\n}\r\n","//context.js boilerplate\r\nimport React, { useCallback, useContext, useState } from \"react\";\r\nimport getCroppedImg from \"./cropImage\";\r\n// const dogImg =\r\n//   \"https://img.huffingtonpost.com/asset/5ab4d4ac2000007d06eb2c56.jpeg?cache=sih0jwle4e&ops=1910_1000\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nconst AppContext = React.createContext();\r\nconst AppProvider = ({ children }) => {\r\n  //border\r\n  const whiteBorderUrl = \"/img/borderSingleImage/white.svg\";\r\n  const blackBorderUrl = \"/img/borderSingleImage/black.svg\";\r\n  const border = [\r\n    {\r\n      id: \"Ever\",\r\n      img: \"/img/borderSelection/everIcon@3x.png\",\r\n      white_space: \"true\",\r\n      borderUrl: whiteBorderUrl\r\n    },\r\n    {\r\n      id: \"Clean\",\r\n      img: \"/img/borderSelection/cleanIcon@3x.png\",\r\n      white_space: \"false\",\r\n      borderUrl: whiteBorderUrl\r\n    },\r\n    {\r\n      id: \"Classic\",\r\n      img: \"/img/borderSelection/classicIcon@3x.png\",\r\n      white_space: \"true\",\r\n      borderUrl: blackBorderUrl\r\n    },\r\n    {\r\n      id: \"Bold\",\r\n      img: \"/img/borderSelection/boldIcon@3x.png\",\r\n      white_space: \"false\",\r\n      borderUrl: blackBorderUrl\r\n    }\r\n  ];\r\n  const borderSingleImage = [\r\n    {\r\n      id: \"black\",\r\n      borderId: [\"Classic\", \"Bold\"],\r\n      img: \"/img/borderSingleImage/black.svg\"\r\n    },\r\n    {\r\n      id: \"white\",\r\n      borderId: [\"Ever\", \"Clean\"],\r\n      img: \"/img/borderSingleImage/white.svg\"\r\n    }\r\n  ];\r\n  const [chooseBorder, setChooseBorder] = useState(border[0]);\r\n  const [singleImageBorder, setSingleImageBorder] = useState(\"white\");\r\n  const chooseBorderHandling = (id) => {\r\n    const chooseBorder = border.find((element) => element.id === id);\r\n    setChooseBorder(chooseBorder);\r\n    borderSingleImage[0].borderId.includes(id)\r\n      ? setSingleImageBorder(\"black\")\r\n      : setSingleImageBorder(\"white\");\r\n  };\r\n  //Modal's state\r\n  const [showModal, setShowModal] = useState(false);\r\n  //Image option Modal\r\n  const [showImageOptionModal, setShowImageOptionModal] = useState(false);\r\n  const imageOptionHandling = (id) => {\r\n    console.log(id);\r\n    setSelectedImageId(id);\r\n    setShowImageOptionModal(true);\r\n  };\r\n  //Cropper's state\r\n  const [imageSrcCropped, setImageSrcCropped] = useState([]);\r\n  const [selectedImageId, setSelectedImageId] = useState(\"\");\r\n  const [croppedAreaPixels, setCroppedAreaPixels] = useState(null);\r\n  const [zoom, setZoom] = useState(1);\r\n  const [crop, setCrop] = useState({ x: 0, y: 0 });\r\n  const [rotation, setRotation] = useState(0);\r\n  const [croppedImage, setCroppedImage] = useState(null);\r\n  const onCropComplete = useCallback((croppedArea, croppedAreaPixels) => {\r\n    console.log(\"cropped moved\");\r\n\r\n    setCroppedAreaPixels(croppedAreaPixels);\r\n  }, []);\r\n  const showCroppedImage = useCallback(\r\n    async ({ id }) => {\r\n      console.log(id);\r\n      console.log(\"Heres the imageSrc\", imageSrc);\r\n\r\n      try {\r\n        const croppedImage = await getCroppedImg(\r\n          imageSrc.find((element) => element.id === selectedImageId).img,\r\n          croppedAreaPixels,\r\n          rotation\r\n        );\r\n        // console.log(\"donee\", { croppedImage });\r\n        // const newImageSrcCropped = imageSrcCropped.filter(\r\n        //   (element) => element.id !== id\r\n        // );\r\n        const newImageSrcCropped = [...imageSrcCropped];\r\n        setCroppedImage(croppedImage);\r\n        //we need to fix this for the positioning\r\n        newImageSrcCropped[\r\n          imageSrcCropped.indexOf(\r\n            imageSrcCropped.find((element) => element.id === id)\r\n          )\r\n        ] = { id: `${id}`, img: croppedImage };\r\n        // setImageSrcCropped([\r\n        //   ...newImageSrcCropped,\r\n        //   { id: `${id}`, img: croppedImage }\r\n        // ]);\r\n        setImageSrcCropped([...newImageSrcCropped]);\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    },\r\n    [croppedAreaPixels, rotation]\r\n  );\r\n  //ending Cropper's state here\r\n\r\n  //handlindInput\r\n  const [addImagePosition, setAddImagePosition] = useState(\"front\");\r\n  const [imageSrc, setImageSrc] = React.useState([]);\r\n  const onFileChange = async (e) => {\r\n    if (e.target.files && e.target.files.length > 0) {\r\n      const file = e.target.files[0];\r\n      let imageDataUrl = await readFile(file);\r\n      console.log(\"uploading files\");\r\n\r\n      const newUploadImageId = uuidv4();\r\n      //if addImagePosition is infront then we add image to the first element index\r\n      setSelectedImageId(newUploadImageId);\r\n      console.log(addImagePosition);\r\n\r\n      addImagePosition === \"front\"\r\n        ? setImageSrcCropped([\r\n            { id: `${newUploadImageId}`, img: imageDataUrl },\r\n            ...imageSrcCropped\r\n          ])\r\n        : setImageSrcCropped([\r\n            ...imageSrcCropped,\r\n            { id: `${newUploadImageId}`, img: imageDataUrl }\r\n          ]);\r\n\r\n      // console.log(imageSrc);\r\n      addImagePosition === \"front\"\r\n        ? setImageSrc([\r\n            { id: `${newUploadImageId}`, img: imageDataUrl },\r\n            ...imageSrc\r\n          ])\r\n        : setImageSrc([\r\n            ...imageSrc,\r\n            { id: `${newUploadImageId}`, img: imageDataUrl }\r\n          ]);\r\n      // console.log(\"working on next cropped src\");\r\n\r\n      setShowModal(true);\r\n    }\r\n  };\r\n  // const onFileChangeBack = async (e) => {\r\n  //   if (e.target.files && e.target.files.length > 0) {\r\n  //     const file = e.target.files[0];\r\n  //     let imageDataUrl = await readFile(file);\r\n  //     console.log(\"uploading files\");\r\n\r\n  //     const newUploadImageId = uuidv4();\r\n  //     //if addImagePosition is infront then we add image to the first element index\r\n  //     setSelectedImageId(newUploadImageId);\r\n  //     console.log(addImagePosition);\r\n\r\n  //     setImageSrcCropped([\r\n  //       ...imageSrcCropped,\r\n  //       { id: `${newUploadImageId}`, img: imageDataUrl }\r\n  //     ]);\r\n\r\n  //     // console.log(imageSrc);\r\n  //     setImageSrc([\r\n  //       ...imageSrc,\r\n  //       { id: `${newUploadImageId}`, img: imageDataUrl }\r\n  //     ]);\r\n  //     // console.log(\"working on next cropped src\");\r\n\r\n  //     setShowModal(true);\r\n  //   }\r\n  // };\r\n  // const onFileChangeFront = async (e) => {\r\n  //   if (e.target.files && e.target.files.length > 0) {\r\n  //     const file = e.target.files[0];\r\n  //     let imageDataUrl = await readFile(file);\r\n  //     console.log(\"uploading files\");\r\n\r\n  //     const newUploadImageId = uuidv4();\r\n  //     //if addImagePosition is infront then we add image to the first element index\r\n  //     setSelectedImageId(newUploadImageId);\r\n  //     setImageSrcCropped([\r\n  //       { id: `${newUploadImageId}`, img: imageDataUrl },\r\n  //       ...imageSrcCropped\r\n  //     ]);\r\n\r\n  //     // console.log(imageSrc);\r\n  //     setImageSrc([\r\n  //       { id: `${newUploadImageId}`, img: imageDataUrl },\r\n  //       ...imageSrc\r\n  //     ]);\r\n  //     // console.log(\"working on next cropped src\");\r\n\r\n  //     setShowModal(true);\r\n  //   }\r\n  // };\r\n  function readFile(file) {\r\n    return new Promise((resolve) => {\r\n      const reader = new FileReader();\r\n      reader.addEventListener(\"load\", () => resolve(reader.result), false);\r\n      reader.readAsDataURL(file);\r\n    });\r\n  }\r\n  //ending handlingInput\r\n\r\n  return (\r\n    <AppContext.Provider\r\n      value={{\r\n        zoom,\r\n        setZoom,\r\n        crop,\r\n        setCrop,\r\n        rotation,\r\n        setRotation,\r\n        croppedAreaPixels,\r\n        setCroppedAreaPixels,\r\n        croppedImage,\r\n        setCroppedImage,\r\n        onCropComplete,\r\n        showCroppedImage,\r\n        onFileChange,\r\n        imageSrc,\r\n        showModal,\r\n        setShowModal,\r\n        setImageSrc,\r\n        selectedImageId,\r\n        setSelectedImageId,\r\n        imageSrcCropped,\r\n        setImageSrcCropped,\r\n        showImageOptionModal,\r\n        setShowImageOptionModal,\r\n        imageOptionHandling,\r\n        border,\r\n        chooseBorder,\r\n        setChooseBorder,\r\n        borderSingleImage,\r\n        chooseBorderHandling,\r\n        singleImageBorder,\r\n        setAddImagePosition,\r\n        addImagePosition\r\n      }}\r\n    >\r\n      {children}\r\n    </AppContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useGlobalContext = () => {\r\n  return useContext(AppContext);\r\n};\r\nexport { AppContext, AppProvider };\r\n","import { useGlobalContext } from \"./context\";\r\nimport \"./styles.css\";\r\nexport default function SingleImage({ id }) {\r\n  const {\r\n    imageSrc,\r\n    imageSrcCropped,\r\n    setShowModal,\r\n    setSelectedImageId,\r\n    setImageSrcCropped,\r\n    setImageSrc,\r\n    imageOptionHandling,\r\n    selectedImageId,\r\n\r\n    chooseBorder\r\n  } = useGlobalContext();\r\n\r\n  return (\r\n    <div\r\n      className={\r\n        selectedImageId === id\r\n          ? \"relative z-40 w-48 h-48 flex justify-center items-center\"\r\n          : \"relative z-10 w-48 h-48 flex justify-center items-center\"\r\n      }\r\n    >\r\n      <img\r\n        id={chooseBorder.white_space === \"true\" ? \"whiteimg\" : \"nowhiteimg\"}\r\n        className={\r\n          chooseBorder.white_space === \"true\"\r\n            ? \"absolute w-32 h-32\"\r\n            : \"absolute w-48 h-48\"\r\n        }\r\n        src={imageSrcCropped.find((element) => element.id === id).img}\r\n        alt=\"crop\"\r\n      />\r\n\r\n      <img\r\n        onClick={() => imageOptionHandling(id)}\r\n        className=\"absolute\"\r\n        src={chooseBorder.borderUrl}\r\n        alt={chooseBorder.id}\r\n      />\r\n    </div>\r\n\r\n    // {/* <div className=\"flex\">\r\n    //   <button\r\n    //     className=\"bg-blue-500 p-1 text-white rounded-xl  hover:bg-green-500\"\r\n    //     onClick={() => {\r\n    //       setSelectedImageId(id);\r\n    //       setShowModal(true);\r\n    //     }}\r\n    //   >\r\n    //     edit cropping\r\n    //   </button>\r\n    //   <button\r\n    //     className=\"bg-blue-500 p-1 text-white rounded-xl  hover:bg-green-500\"\r\n    //     onClick={() => {\r\n    //       const newImageSrcCropped = imageSrcCropped.filter(\r\n    //         (element) => element.id !== id\r\n    //       );\r\n    //       const newImageSrc = imageSrc.filter((element) => element.id !== id);\r\n    //       setImageSrcCropped(newImageSrcCropped);\r\n    //       setImageSrc(newImageSrc);\r\n    //       setShowModal(false);\r\n    //     }}\r\n    //   >\r\n    //     Clear Image\r\n    //   </button>\r\n    // </div> */}\r\n  );\r\n}\r\n","import { useGlobalContext } from \"./context\";\r\n\r\nexport function FrontUploadMoreButton(props) {\r\n  const {\r\n    onFileChange,\r\n    setAddImagePosition,\r\n    addImagePosition\r\n  } = useGlobalContext();\r\n  return (\r\n    <div\r\n      className=\"h-48 w-48 min-w-min\"\r\n      onClick={() => {\r\n        setAddImagePosition(props.position);\r\n        console.log(\"you click upload: \", addImagePosition);\r\n      }}\r\n    >\r\n      <div className=\"w-48 h-48\">\r\n        <label htmlFor=\"upload-image-front\">\r\n          <div className=\"h-48 w-48  border-dashed border-4 border-gray-500 rounded-xl \">\r\n            <div className=\"h-full flex  justify-center items-center text-4xl text-gray-500\">\r\n              +\r\n            </div>\r\n          </div>\r\n        </label>\r\n        <input\r\n          className=\"hidden\"\r\n          type=\"file\"\r\n          onChange={(e) => {\r\n            console.log(\r\n              \"log position in uploadMoreButtonxhx: \",\r\n              addImagePosition\r\n            );\r\n\r\n            onFileChange(e);\r\n          }}\r\n          accept=\"image/*\"\r\n          id=\"upload-image-front\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function BackUploadMoreButton(props) {\r\n  const {\r\n    onFileChange,\r\n    setAddImagePosition,\r\n    addImagePosition\r\n  } = useGlobalContext();\r\n  return (\r\n    <div\r\n      className=\"h-48 w-48 min-w-min\"\r\n      onClick={() => {\r\n        setAddImagePosition(props.position);\r\n        console.log(\"you click upload: \", addImagePosition);\r\n      }}\r\n    >\r\n      <div className=\"w-48 h-48\">\r\n        <label htmlFor=\"upload-image-back\">\r\n          <div className=\"h-48 w-48  border-dashed border-4 border-gray-500 rounded-xl \">\r\n            <div className=\"h-full flex  justify-center items-center text-4xl text-gray-500\">\r\n              +\r\n            </div>\r\n          </div>\r\n        </label>\r\n        <input\r\n          className=\"hidden\"\r\n          type=\"file\"\r\n          onChange={(e) => {\r\n            console.log(\r\n              \"log position in uploadMoreButtonxhx: \",\r\n              addImagePosition\r\n            );\r\n\r\n            onFileChange(e);\r\n          }}\r\n          accept=\"image/*\"\r\n          id=\"upload-image-back\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function UploadMoreButton(props) {\r\n  const {\r\n    onFileChange,\r\n    setAddImagePosition,\r\n    addImagePosition\r\n  } = useGlobalContext();\r\n  return (\r\n    <div\r\n      className=\"h-48 w-48 min-w-min\"\r\n      onClick={() => {\r\n        setAddImagePosition(props.position);\r\n        console.log(\"you click upload: \", addImagePosition);\r\n      }}\r\n    >\r\n      <div className=\"w-48 h-48\">\r\n        <label htmlFor=\"upload-image\">\r\n          <div className=\"h-48 w-48  border-dashed border-4 border-gray-500 rounded-xl \">\r\n            <div className=\"h-full flex  justify-center items-center text-4xl text-gray-500\">\r\n              +\r\n            </div>\r\n          </div>\r\n        </label>\r\n        <input\r\n          className=\"hidden\"\r\n          type=\"file\"\r\n          onChange={(e) => {\r\n            console.log(\r\n              \"log position in uploadMoreButtonxhx: \",\r\n              addImagePosition\r\n            );\r\n\r\n            onFileChange(e);\r\n          }}\r\n          accept=\"image/*\"\r\n          id=\"upload-image\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { useGlobalContext } from \"./context\";\r\n\r\nexport default function UploadMoreButtonAnimation() {\r\n  const { onFileChange, singleImageBorder, chooseBorder } = useGlobalContext();\r\n  return (\r\n    <div className=\"flex flex-col w-full items-center justify-center\">\r\n      <div className=\"text-xl \">เลือกรูปแรกของคุณ</div>\r\n      <label htmlFor=\"upload-image\">\r\n        <div className=\" h-48 w-48 animate-pulse border-dashed border-4 border-pink-500 rounded-xl flex justify-center items-center text-6xl text-pink-500\">\r\n          <div>+</div>\r\n        </div>\r\n      </label>\r\n      <input\r\n        className=\"hidden\"\r\n        type=\"file\"\r\n        onChange={onFileChange}\r\n        accept=\"image/*\"\r\n        id=\"upload-image\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import { useGlobalContext } from \"./context\";\r\nimport SingleImage from \"./singleImage\";\r\nimport UploadMoreButton, {\r\n  BackUploadMoreButton,\r\n  FrontUploadMoreButton\r\n} from \"./uploadMoreButton\";\r\nimport UploadMoreButtonAnimation from \"./uploadMoreButtonAnimation\";\r\n\r\nexport default function Body() {\r\n  const { imageSrc, imageSrcCropped } = useGlobalContext();\r\n  return (\r\n    <div className=\"flex-grow  flex justify-center items-center\">\r\n      <div className=\"inline-flex w-full space-x-5    overflow-x-scroll h-full items-center xs:no-scrollbar\">\r\n        {/* <>\r\n          <UploadMoreButton />\r\n\r\n          <div className=\"flex flex-shrink-0 space-x-5 items-center \">\r\n            <div className=\"relative z-10 w-48 h-48 flex justify-center items-center\">\r\n              <img\r\n                id=\"nowhiteimg\"\r\n                className=\"absolute w-48 h-48\"\r\n                src=\"/img/exampleImage/dog2.jpg\"\r\n                alt=\"crop\"\r\n              />\r\n\r\n              <img\r\n                id=\"border\"\r\n                className=\"absolute\"\r\n                src={`/img/borderSingleImage/black.svg`}\r\n                alt=\"1\"\r\n              />\r\n            </div>\r\n\r\n            <div className=\"relative z-10 w-48 h-48 flex justify-center items-center\">\r\n              <div className=\"relative w-48 h-48 \">\r\n                <img\r\n                  id=\"whiteimg\"\r\n                  className=\"absolute w-32 h-32\"\r\n                  src=\"/img/exampleImage/dog1.jpg\"\r\n                  alt=\"crop\"\r\n                />\r\n\r\n                <img\r\n                  className=\"absolute\"\r\n                  src={`/img/borderSingleImage/black.svg`}\r\n                  alt=\"1\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <UploadMoreButton />\r\n        </> */}\r\n\r\n        {/* Comment out the funcitonal */}\r\n        {/* {imageSrc.length > 0 ? (\r\n          <>\r\n            <UploadMoreButton />\r\n\r\n            <div className=\"flex flex-shrink-0 space-x-5 items-center\">\r\n              {imageSrcCropped.map((element) => (\r\n                <SingleImage id={element.id} key={element.id} />\r\n              ))}\r\n            </div>\r\n            <UploadMoreButton />\r\n          </>\r\n        ) : (\r\n          <UploadMoreButtonAnimation />\r\n        )} */}\r\n        {imageSrc.length > 0 ? (\r\n          <div className=\"flex justify-center space-x-2\">\r\n            {/* <UploadMoreButton position=\"front\" /> */}\r\n            <FrontUploadMoreButton position=\"front\" />\r\n            <div className=\"flex flex-shrink-0  items-center space-x-5\">\r\n              {imageSrcCropped.map((element) => (\r\n                <SingleImage id={element.id} key={element.id} />\r\n              ))}\r\n            </div>\r\n            <BackUploadMoreButton position=\"back\" />\r\n            {/* <UploadMoreButton position=\"back\" /> */}\r\n          </div>\r\n        ) : (\r\n          <UploadMoreButtonAnimation />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","export default function Bottom() {\r\n  return (\r\n    <div className=\"border-t-2 border-black-100 p-2  flex justify-center items-center\">\r\n      <a\r\n        href=\"#\"\r\n        className=\"bg-pink-500 rounded-xl py-2 px-24 text-white font-bold\"\r\n      >\r\n        ชำระเงิน\r\n      </a>\r\n    </div>\r\n  );\r\n}\r\n","import ReactDOM from \"react-dom\";\r\nimport { useGlobalContext } from \"./context\";\r\n\r\nexport default function ImageOptionModal({ id }) {\r\n  const {\r\n    showImageOptionModal,\r\n    setShowImageOptionModal,\r\n    setShowModal,\r\n    imageSrc,\r\n    selectedImageId,\r\n    setImageSrc,\r\n    setImageSrcCropped,\r\n    imageSrcCropped\r\n  } = useGlobalContext();\r\n  const adjustClickHandling = () => {\r\n    setShowModal(true);\r\n  };\r\n  const removeClickHandling = () => {\r\n    const newImageSrcCropped = imageSrcCropped.filter(\r\n      (element) => element.id !== selectedImageId\r\n    );\r\n    const newImageSrc = imageSrc.filter(\r\n      (element) => element.id !== selectedImageId\r\n    );\r\n\r\n    setImageSrcCropped(newImageSrcCropped);\r\n    setImageSrc(newImageSrc);\r\n    setShowImageOptionModal(false);\r\n  };\r\n\r\n  const content = showImageOptionModal && (\r\n    <div\r\n      className=\"z-40 absolute flex flex-col justify-end items-center  bg-gray-500 bg-opacity-50 h-full w-full\"\r\n      onClick={() => setShowImageOptionModal(false)}\r\n    >\r\n      <div\r\n        className=\"flex items-center space-x-2 bg-white py-2 w-64 rounded-t-lg text-md pl-4\"\r\n        onClick={adjustClickHandling}\r\n      >\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          className=\"h-5 w-5\"\r\n          fill=\"none\"\r\n          viewBox=\"0 0 24 24\"\r\n          stroke=\"currentColor\"\r\n        >\r\n          <path\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeWidth={2}\r\n            d=\"M14.121 14.121L19 19m-7-7l7-7m-7 7l-2.879 2.879M12 12L9.121 9.121m0 5.758a3 3 0 10-4.243 4.243 3 3 0 004.243-4.243zm0-5.758a3 3 0 10-4.243-4.243 3 3 0 004.243 4.243z\"\r\n          />\r\n        </svg>\r\n        <span>ปรับมุมรูป</span>\r\n      </div>\r\n      <div\r\n        className=\" flex items-center space-x-2 bg-white py-2 w-64 border-t-2 border-gray-200 pl-4\"\r\n        onClick={removeClickHandling}\r\n      >\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          class=\"h-5 w-5\"\r\n          viewBox=\"0 0 20 20\"\r\n          fill=\"currentColor\"\r\n        >\r\n          <path\r\n            fill-rule=\"evenodd\"\r\n            d=\"M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z\"\r\n            clip-rule=\"evenodd\"\r\n          />\r\n        </svg>\r\n        <span>ลบรูปนี้ไป</span>\r\n      </div>\r\n    </div>\r\n  );\r\n  return ReactDOM.createPortal(content, document.getElementById(\"img-modal\"));\r\n}\r\n","import React from \"react\";\r\nimport Cropper from \"react-easy-crop\";\r\nimport { useGlobalContext } from \"./context\";\r\nimport getCroppedImg from \"./cropImage\";\r\nconst dogImg =\r\n  \"https://img.huffingtonpost.com/asset/5ab4d4ac2000007d06eb2c56.jpeg?cache=sih0jwle4e&ops=1910_1000\";\r\n\r\nexport default function Crop() {\r\n  const {\r\n    zoom,\r\n    setZoom,\r\n    crop,\r\n    setCrop,\r\n    rotation,\r\n    setRotation,\r\n    croppedAreaPixels,\r\n    setCroppedAreaPixels,\r\n    croppedImage,\r\n    setCroppedImage,\r\n    onCropComplete,\r\n    showCroppedImage,\r\n    imageSrc,\r\n    selectedImageId,\r\n    imageSrcCropped\r\n  } = useGlobalContext();\r\n  // const [crop, setCrop] = useState({ x: 0, y: 0 });\r\n  // const [rotation, setRotation] = useState(0);\r\n  // const [zoom, setZoom] = useState(1);\r\n  // const [croppedAreaPixels, setCroppedAreaPixels] = useState(null);\r\n  // const [croppedImage, setCroppedImage] = useState(null);\r\n  // const onCropComplete = useCallback((croppedArea, croppedAreaPixels) => {\r\n  //   setCroppedAreaPixels(croppedAreaPixels);\r\n  // }, []);\r\n  // const showCroppedImage = useCallback(async () => {\r\n  //   try {\r\n  //     const croppedImage = await getCroppedImg(\r\n  //       dogImg,\r\n  //       croppedAreaPixels,\r\n  //       rotation\r\n  //     );\r\n  //     console.log(\"donee\", { croppedImage });\r\n  //     setCroppedImage(croppedImage);\r\n  //   } catch (e) {\r\n  //     console.error(e);\r\n  //   }\r\n  // }, [croppedAreaPixels, rotation]);\r\n\r\n  // const onClose = useCallback(() => {\r\n  //   setCroppedImage(null);\r\n  // }, []);\r\n  console.log(\"in Cropper.js imageSrc: \", imageSrc);\r\n  console.log(\"in Cropper.js imageSrcCropped: \", imageSrcCropped);\r\n  // console.log(imageSrc);\r\n  console.log(selectedImageId);\r\n\r\n  return (\r\n    <div className=\"\">\r\n      <div>\r\n        <Cropper\r\n          image={imageSrc.find((element) => element.id === selectedImageId).img}\r\n          crop={crop}\r\n          rotation={rotation}\r\n          zoom={zoom}\r\n          aspect={3 / 3}\r\n          onCropChange={setCrop}\r\n          onRotationChange={setRotation}\r\n          onCropComplete={onCropComplete}\r\n          onZoomChange={setZoom}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { useGlobalContext } from \"./context\";\r\nimport Crop from \"./cropper\";\r\n\r\nexport const Modal = (props) => {\r\n  const { setShowModal, showModal } = props;\r\n  const { showCroppedImage, selectedImageId } = useGlobalContext();\r\n\r\n  const doneCropHandling = () => {\r\n    setShowModal(false);\r\n    showCroppedImage({ id: selectedImageId });\r\n  };\r\n  // const cancelCropHandling = () => {\r\n  //   setShowModal(false);\r\n  // };\r\n\r\n  const content = showModal && (\r\n    <div className=\"z-50 absolute bg-gray-500 bg-opacity-50 h-full w-full flex justify-center items-center\">\r\n      <div className=\"w-9/12 md:w-6/12 flex-col justify-center items-center \">\r\n        <header className=\"bg-pink-500  text-white text-xl text-center\">\r\n          ครอปรูปตามขนาดที่ต้องการ\r\n        </header>\r\n        <div className=\"bg-white text-center w-full h-96\">\r\n          <div id=\"cropper\" className=\"bg-gray-600 w-full relative\">\r\n            <Crop />\r\n          </div>\r\n          <div className=\"flex justify-center space-x-10 py-2\">\r\n            <button\r\n              className=\"p-2 text-white bg-blue-500 rounded-xl\"\r\n              onClick={() => {\r\n                doneCropHandling();\r\n              }}\r\n            >\r\n              เลือกมุมนี้\r\n            </button>\r\n            {/* <button\r\n              className=\"p-2 text-white bg-blue-500\"\r\n              onClick={() => cancelCropHandling()}\r\n            >\r\n              cancel\r\n            </button> */}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  return ReactDOM.createPortal(content, document.getElementById(\"modal\"));\r\n};\r\n","import { useGlobalContext } from \"../context\";\r\n\r\nexport default function BorderChoice({ index, selected = \"false\" }) {\r\n  const { border, chooseBorderHandling } = useGlobalContext();\r\n  return (\r\n    <div\r\n      key={index}\r\n      className=\"\"\r\n      onClick={() => chooseBorderHandling(border[index].id)}\r\n    >\r\n      <div\r\n        className={\r\n          selected === \"true\"\r\n            ? \"w-16 bg-gray-200 p-2 rounded flex flex-col justify-center items-center\"\r\n            : \"w-16  p-2 rounded flex flex-col justify-center items-center\"\r\n        }\r\n      >\r\n        <img className=\"w-12 rounded\" src={border[index].img} alt=\"1\" />\r\n        <div\r\n          className={\r\n            selected === \"true\" ? \"font-bold text-pink-500\" : \"font-bold\"\r\n          }\r\n        >\r\n          {border[index].id}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","export default function NavbarUpper() {\r\n  return (\r\n    <div className=\"flex justify-between\">\r\n      <div className=\"flex items-center\">\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          className=\"h-4 w-4\"\r\n          fill=\"none\"\r\n          viewBox=\"0 0 24 24\"\r\n          stroke=\"currentColor\"\r\n        >\r\n          <path\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeWidth={2}\r\n            d=\"M10 19l-7-7m0 0l7-7m-7 7h18\"\r\n          />\r\n        </svg>\r\n      </div>\r\n      <div className=\"text-gray-800 text-bold font-semibold \">SNAPPIC</div>\r\n      <div className=\"flex items-center\">\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          className=\"h-4 w-4\"\r\n          fill=\"none\"\r\n          viewBox=\"0 0 24 24\"\r\n          stroke=\"currentColor\"\r\n        >\r\n          <path\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeWidth={2}\r\n            d=\"M4 6h16M4 12h16M4 18h16\"\r\n          />\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { useGlobalContext } from \"../context\";\r\nimport BorderChoice from \"./BorderChoice\";\r\nimport NavbarUpper from \"./NavbarUpper\";\r\n\r\nexport default function Navbar() {\r\n  const { border, chooseBorder } = useGlobalContext();\r\n\r\n  return (\r\n    <div className=\" flex flex-col shadow-md py-2 px-2\">\r\n      <NavbarUpper />\r\n      <div className=\"flex justify-between\">\r\n        {border.map((element, index) => {\r\n          if (border[index].id === chooseBorder.id) {\r\n            return <BorderChoice key={index} index={index} selected=\"true\" />;\r\n          } else {\r\n            return <BorderChoice key={index} index={index} selected=\"false\" />;\r\n          }\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import Body from \"./Body\";\nimport Bottom from \"./Bottom\";\nimport { useGlobalContext } from \"./context\";\nimport ImageOptionModal from \"./imageOptionModal\";\nimport { Modal } from \"./Modal\";\nimport Navbar from \"./Navbar/Navbar\";\nimport \"./styles.css\";\nexport default function App() {\n  const { showModal, setShowModal } = useGlobalContext();\n  return (\n    <div className=\"App\">\n      <div className=\"flex flex-col h-screen\">\n        <Navbar />\n        <Body />\n        <Bottom />\n      </div>\n      <Modal setShowModal={setShowModal} showModal={showModal} />\n      <ImageOptionModal />\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { AppProvider } from \"./context\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <AppProvider>\n      <App />\n    </AppProvider>\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}